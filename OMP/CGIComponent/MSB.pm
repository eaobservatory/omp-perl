package OMP::CGIComponent::MSB;

=head1 NAME

OMP::CGIComponent::MSB - Web display of MSB information

=head1 SYNOPSIS

  use OMP::CGIComponent::MSB;

=head1 DESCRIPTION

Helper methods for generating and displaying portions of web
pages that display MSB comments and general MSB information.

=cut

use 5.006;
use strict;
use warnings;
use Carp;

use Time::Seconds qw(ONE_HOUR);

use OMP::CGIComponent::Helper;
use OMP::Constants qw(:done);
use OMP::DBServer;
use OMP::Error qw(:try);
use OMP::General;
use OMP::Info::Comment;
use OMP::MSBDB;
use OMP::MSBServer;
use OMP::ProjDB;
use OMP::SpServer;
use OMP::UserServer;

$| = 1;

=head1 Routines

=over 4

=item B<fb_msb_active>

Create a table of active MSBs for a given project

  fb_msb_active($cgi, $projectid);

=cut

sub fb_msb_active {
  my $q = shift;
  my $projectid = shift;

  my $active;
  try {
    $active = OMP::SpServer->programDetails($projectid,
					    '***REMOVED***',
					    'objects');

    # First go through the array quickly to make sure we have
    # some valid entries
    my @remaining = grep { $_->remaining > 0 } @$active;
    my $total = @$active;
    my $left = @remaining;
    my $done = $total - $left;
    if ($left == 0) {
      if ($total == 1) {
	print "The MSB present in the science program has been observed.<br>\n";
      } else {
	print "All $total MSBs in the science program have been observed.<br>\n";
      } 

    } else {

      # Nice little message letting us know no of msbs present in the table
      # that have not been observed.
      if ($done > 0) {
	if ($done == 1) {
	  print "$done out of $total MSBs present in the science program has been observed.<br>\n"; 
	} else {
	  print "$done out of $total MSBs present in the science program have been observed.<br>\n"; 
	}
      }

      # Now print the table (with an est. time column) if we have content
      msb_table($q, $active, 1);

    }

  } catch OMP::Error::UnknownProject with {
    print "Science program for $projectid not present in database";

  } otherwise {
    my $E = shift;
    print "Error obtaining science program details for project $projectid [$E]";

  };

}

=item B<fb_msb_observed>

Create a table of observed MSBs for a given project

  fb_msb_observed($cgi, $projectid);

=cut

sub fb_msb_observed {
  my $q = shift;
  my $projectid = shift;

  # Get observed MSBs
  my $observed = OMP::MSBServer->observedMSBs({projectid => $projectid,
					       format => 'data'});

  # Generate the HTML table
  (@$observed) and msb_table($q, $observed);
}

=item B<msb_action>

Working in conjunction with the B<msb_comments> function described elsewhere
in this document this function decides if the form generated by B<msb_comments>
was submitted, and if so, what action to take.

  msb_action($q);

Takes a C<CGI> query object as the only argument.

=cut

sub msb_action {
  my $q = shift;

  if ($q->param("submit_msb_comment")) {
    # Submit a comment
    try {

      # Get the user object
      my $user = OMP::UserServer->getUser($q->param('author'));

      # Make sure we got a user object
      if (! $user) {
	print "Must supply a valid OMP user ID in order to submit a comment";

	# Redisplay the comment form and return
	msb_comment_form($q, 1);
	return;
      }

      # Create the comment object
      my $comment = new OMP::Info::Comment( author => $user,
					    text => $q->param('comment'),
					    status => OMP__DONE_COMMENT );

      # Add the comment
      OMP::MSBServer->addMSBcomment( $q->param('projectid'),
				     $q->param('msbid'),
				     $comment );
      print $q->h2("MSB comment successfully submitted");
    } catch OMP::Error::MSBMissing with {
      my $Error = shift;
      print "MSB not found in database:<p>$Error";
    } otherwise {
      my $Error = shift;
      print "An error occurred preventing the comment submission:<p>$Error";
    };

  } elsif ($q->param("Remove")) {
    # Mark msb as 'all done'
    try {
      OMP::MSBServer->alldoneMSB( $q->param('projectid'), $q->param('checksum') );
      print $q->h2("MSB removed from consideration");
    } catch OMP::Error::MSBMissing with {
      my $Error = shift;
      print "MSB not found in database:<p>$Error";
    } otherwise {
      my $Error = shift;
      print "An error occurred while attempting to mark the MSB as Done:<p>$Error";
    };

  } elsif ($q->param("Undo") || $q->param("unRemove")) {
    # Unmark msb as 'done' or unremove a removed MSB
    try {
      OMP::MSBServer->undoMSB( $q->param('projectid'), $q->param('checksum') );
      if ($q->param("Undo")) {
	print $q->h2("MSB done mark removed");
      } else {
	print $q->h2("MSB no longer removed from consideration");
      }

    } catch OMP::Error::MSBMissing with {
      my $Error = shift;
      print "MSB not found in database:<p>$Error";
    } otherwise {
      my $Error = shift;
      print "An error occurred while attempting to remove the MSB Done mark:<p>$Error";
    };
  }
}

=item B<msb_comments>

Creates an HTML table of MSB comments.

  msb_comments($cgi, $msbcomments, $sp);

Takes a reference to an array of C<OMP::Info::MSB> objects as the second argument.
Last argument is an optional Sp object.

=cut

sub msb_comments {
  my $q = shift;
  my $commentref = shift;
  my $sp = shift;

  my @output;
  if ($q->param('show') =~ /observed/) {
    @output = grep {$_->comments->[0]->status != OMP__DONE_FETCH} @$commentref;
  } elsif ($q->param('show') =~ /current/) {
    @output = grep {$sp->existsMSB($_->checksum)} @$commentref;
  } else {
    @output = @$commentref;
  }

  print "<table class='infobox' width=100%>";

  my $i = 0;
  my $bgcolor;
  foreach my $msb (@output) {
    $i++;

    # If the MSB exists in the science program we'll provide a "Remove" button and we'll
    # be able to display the number of remaining observations.
    my $exists = ($sp and $sp->existsMSB($msb->checksum) ? 1 : 0 );

    # this will be the actual science program MSB if it exists
    # We need this so that we can provide the correct button types
    my $spmsb;

    my $remstatus;
    if ($exists) {
      $spmsb = $sp->fetchMSB( $msb->checksum );
      my $remaining = $spmsb->remaining;
      if ($spmsb->isRemoved) {
	$remstatus = "REMOVED";
      } elsif ($remaining == 0) {
	$remstatus = "COMPLETE";
      } else {
	$remstatus = "Remaining: $remaining";
      }
    }

    # Get the MSB title
    my $msbtitle = $msb->title;
    (!$msbtitle) and $msbtitle = "[NONE]";

    print "<tr valign=top><td><b>MSB $i</b></td>";
    print "<td>";
    print "<b>$remstatus</b>"
      if ($remstatus);
    print "</td>";
    print "<td><b>Target:</b> ".$msb->target ."</td>";
    print "<td><b>Waveband:</b>". $msb->waveband ."</td>";
    print "<td><b>Instrument:</b>". $msb->instrument ."</td>";
    print "<tr><td colspan=5><b>Title: $msbtitle</b></td>";


    # Colors associated with statuses
    my %colors = (&OMP__DONE_FETCH => '#c9d5ea',
		  &OMP__DONE_DONE => '#c6bee0',
		  &OMP__DONE_ALLDONE => '#8075a5',
		  &OMP__DONE_COMMENT => '#9f93c9',
		  &OMP__DONE_UNDONE => '#ffd8a3',
		  &OMP__DONE_ABORTED => '#9573a0',
		  &OMP__DONE_REJECTED => '#bc5a74',
		  &OMP__DONE_SUSPENDED => '#ffb959',);

    foreach my $comment ($msb->comments) {
      my $status = $comment->status;

      # Set the background color for the cell
      $bgcolor = $colors{$comment->status};
      print "<tr bgcolor=$bgcolor valign=top><td><div class='black'><font size =-2>Date (UT):  " .
	$comment->date ."<br>";

      # Show comment author if there is one
      if ($comment->author) {
	print "Author: " . $comment->author->html . "</font></div>";
      }

      print "<td colspan=4>" . $comment->text ."</td>";
    }

    print "<tr bgcolor='#d3d3dd'><td align=left colspan=5>";
    print $q->startform;

    # Some hidden params to pass
    ($q->param('utdate')) and print $q->hidden(-name=>'utdate',
					       -default=>$q->param('utdate'));

    print $q->hidden(-name=>'show_output',
		     -default=>1,);
    print $q->hidden(-name=>'checksum',
		     -default=>$msb->checksum);
    print $q->hidden(-name=>'projectid',
		     -default=>$msb->projectid);

    # Make "Remove" and "undo" buttons if the MSB exists in the 
    # science program
    if ($exists) {
      if ($spmsb->isRemoved) {
	# If it has been removed, the only relevant action is to unremove it
	print $q->submit("unRemove");
      } else {
	print $q->submit("Remove");
	print " ";
	print $q->submit("Undo");
      }
      print " ";
    }

    print $q->submit("Add Comment");
    print $q->endform;
    print "</td>";
  }
  print "</table>";
}

=item B<msb_comments_by_project>

Show MSB comments sorted by project

  msb_comments_by_project($cgi, $msbcomments);

Takes a reference to a data structure containing MSBs and their comments sorted by project.

=cut

sub msb_comments_by_project {
  my $q = shift;
  my $comments = shift;
  my %sorted;

  # Get the Private and Public cgi-bin URLs
  my $public_url = public_url();
  my $private_url = private_url();

  foreach my $msb (@$comments) {
    my $projectid = $msb->projectid;
    $sorted{$projectid} = [] unless exists $sorted{$projectid};
    push(@{ $sorted{$projectid} }, $msb);
  }

  foreach my $projectid (keys %sorted) {
    print $q->h2("Project: <a href='$public_url/projecthome.pl?urlprojid=$projectid'>$projectid</a>");
    msb_comments($q, \@{$sorted{$projectid}});
    print $q->hr;
  }
}

=item B<msb_comment_form>

Create a form for submitting an MSB comment.  If any of the values the form
takes are available in the query param list they can be used as defaults.

  msb_comment_form($cgi, 1);

The first argument is a C<CGI> query object.  If the second argument is true
any available params are used as defaults.

=cut

sub msb_comment_form {
  my $q = shift;
  my $defaults = shift;

  my %defaults;
  if ($defaults) {
    # Use query param values as defaults
    %defaults = map {$_, $q->param($_)} qw/author comment msbid/;
  } else {
    %defaults = (author => undef,
		 comment => undef,
		 msbid =>$q->param('checksum'),)
  }

  print "<table border=0><tr><td valign=top>User ID: </td><td>";
  print $q->startform;
  print $q->textfield(-name=>'author',
		      -size=>22,
		      -maxlength=>32,
		      -default=>$defaults{author},);
  print "</td><tr><td valign=top>Comment: </td><td>";
  print $q->hidden(-name=>'submit_msb_comment',
		   -default=>1,);
  print $q->hidden(-name=>'show_output',
		   -default=>1,);
  print $q->hidden(-name=>'msbid',
		   -default=>$defaults{msbid},);
  ($q->param('projectid')) and print $q->hidden(-name=>'projectid',
						-default=>$q->param('projectid'));

  ($q->param('utdate')) and print $q->hidden(-name=>'utdate',
					     -default=>$q->param('utdate'));
  print $q->textarea(-name=>'comment',
		     -rows=>5,
		     -columns=>50,
		     -default=>$defaults{comment},);
  print "</td><tr><td colspan=2 align=right>";
  print $q->submit("Submit");
  print $q->endform;
  print "</td></table>";
}

=item B<msb_sum>

Displays the project details (lists all MSBs)

  msb_sum($cgi, %cookie);

=cut

sub msb_sum {
  my $q = shift;
  my %cookie = @_;

  my $msbsum = OMP::SpServer->programDetails($cookie{projectid},
					     $cookie{password},
					     'htmlcgi');

  print $q->h2("MSB summary"), $msbsum;
#        $q->pre("$msbsum");

}

=item B<msb_sum_hidden>

Creates text showing current number of msbs, but not actually display the
program details.

  msb_sum_hidden($cgi, %cookie);

=cut

sub msb_sum_hidden {
  my $q = shift;
  my %cookie = @_;

  my $sp;
  my @msbs;
  my $projectid = $cookie{projectid};
  try {
    my $db = OMP::MSBDB->new(DB=>new OMP::DBbackend,
			     ProjectID => $projectid,
			     Password => $cookie{password},);

    # Our XML query for retrieving all MSBs
    my $xml = "<MSBQuery>"
      ."<projectid full=\"1\">$projectid</projectid>"
	."<disableconstraint>all</disableconstraint>"
	  ."</MSBQuery>";

    my $query = new OMP::MSBQuery( XML => $xml );

    # Run the query
    @msbs = $db->queryMSB($query);

  } catch OMP::Error::UnknownProject with {
    print "Science program for $projectid not present in database";
  } otherwise {
    my $E = shift;
    print "Error obtaining science program details for project $projectid [$E]";
  };


  print $q->h2("Current MSB status");
  if (scalar(@msbs) == 1) {
    print "1 MSB currently stored in the database.";
    print " Click <a href='fbmsb.pl'>here</a> to list its contents.";
  } else {
    print scalar(@msbs) . " MSBs currently stored in the database.";
    print " Click <a href='fbmsb.pl'>here</a> to list them all."
      unless (! @msbs);
  }
  print $q->hr;

}

=item B<msb_table>

Create a table containing information about given MSBs

  msb_table($cgi, $msbs, $show_estimated);

Second argument should be an array reference containing 
C<OMP::Info::MSB> objects.  If the optional third argument
is true, a column name "Est. time" will appear for presenting
estimated time in seconds.

=cut

sub msb_table {
  my $q = shift;
  my $program = shift;
  my $est_column = shift;

  print "<table width=100%>";
  print "<tr bgcolor=#bcbee3><td><b>MSB</b></td>";
  print "<td><b>Target</b></td>";
  print "<td><b>Waveband</b></td>";
  print "<td><b>Instrument</b></td>";

  # Show the estimated time column  if it's been asked for
  print "<td><b>Est. time</b></td>"
    unless (! $est_column);

  # Only bother with a remaining column if we have remaining
  # information
  print "<td><b>Remaining</b></td>"
    if (defined $program->[0]->remaining);

  # And let's have an N Repeats column if that's available
  print "<td><b>N Repeats</b></td>"
    if (defined $program->[0]->nrepeats);

  # Note that this doesnt really work as code shared for MSB and
  # MSB Done summaries
  my $i;
  foreach my $msb (@$program) {
    # skip if we have a remaining field and it is 0 or less
    # dont skip if the remaining field is simply undefined
    # since that may be a valid case
    next if defined $msb->remaining && $msb->remaining <= 0;

    # Skip if this is only a fetch comment
    next if (scalar @{$msb->comments} && 
	     $msb->comments->[0]->status == &OMP__DONE_FETCH);

    # Create a summary table
    $i++;
    print "<tr><td>$i</td>";

    print "<td>" . $msb->target . "</td>";
    print "<td>" . $msb->waveband . "</td>";
    print "<td>" . $msb->instrument . "</td>";

    if ($est_column) {
      if ($msb->timeest) {
	# Convert estimated time from seconds to hours
	my $timeest = sprintf "%.2f hours", ($msb->timeest / ONE_HOUR);
	print "<td>$timeest</td>";
      } else {
	print "<td>--</td>";
      }
    }

    print "<td>" . $msb->remaining . "</td>"
      unless (! defined $msb->remaining);
    print "<td>" . $msb->nrepeats . "</td>"
      unless (! defined $msb->nrepeats);
  }

  print "</table>\n";
}

=item B<observed_form>

Create a form with a textfield for inputting a UT date and submitting it.

  observed_form($cgi);

=cut

sub observed_form {
  my $q = shift;

  my $db = new OMP::ProjDB( DB => OMP::DBServer->dbConnection, );

  # Get today's date and use that ase the default
  my $utdate = OMP::General->today;

  # Get the telescopes for our popup menu
  my @tel = $db->listTelescopes;

  print "<table><td align='right'><b>";
  print $q->startform;
  print $q->hidden(-name=>'show_output',
		   -default=>1,);
  print "UT Date: </b><td>";
  print $q->textfield(-name=>'utdate',
		      -size=>15,
		      -maxlength=>75,
		      -default=>$utdate,);
  print "</td><td></td><tr><td align='right'><b>Telescope: </b></td><td>";
  print $q->popup_menu(-name=>'telescope',
		       -values=>\@tel,);
  print "</td><td colspan=2>";
  print $q->submit("View Comments");
  print $q->endform;
  print "</td></table>";

}

=back

=head1 SEE ALSO

C<OMP::CGI::MSBPage>

=head1 AUTHOR

Kynan Delorey E<lt>k.delorey@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2004 Particle Physics and Astronomy Research Council.
All Rights Reserved.

=cut

1;
