package OMP::NightRep;

=head1 NAME

OMP::NightRep - Generalized routines to details from a given night

=head1 SYNOPSIS

  use OMP::NightRep;

  $nr = new OMP::NightRep( date => '2002-12-18',
                           telescope => 'jcmt');

  $obs = $nr->obs;
  @faults = $nr->faults;
  $timelost = $nr->faultloss;
  @acct = $nr->accounting;
  $weather = $nr->weatherloss;


=head1 DESCRIPTION

A high-level wrapper around routines useful for generating nightly
activity reports. Provides a means to obtain details of observations
taken on a night, faults occuring and project accounting.

=cut

use 5.006;
use strict;
use warnings;
use Carp;
our $VERSION = (qw$ Revision: 1.2 $ )[1];

use OMP::Error qw/ :try /;
use OMP::General;
use OMP::DBbackend;
use OMP::Info::ObsGroup;
use OMP::TimeAcctDB;
use OMP::FaultDB;
use OMP::FaultStats;
use OMP::CommentServer;
use OMP::MSBDoneDB;
use Time::Piece qw/ :override /;
use Text::Wrap;
use OMP::BaseDB;

# This is the key used to specify warnings in result hashes
use vars qw/ $WARNKEY /;
$WARNKEY = '__WARNINGS__';

=head1 METHODS

=head2 Constructors

=over 4

=item B<new>

Create a new night report object. Accepts a hash argument specifying
the date and telescope to use for all queries.

  $nr = OMP::NightRep->new( telescope => 'JCMT',
			    date => '2002-12-10',
			  );

The date can be specified as a Time::Piece object and the telescope
can be a Astro::Telescope object.

=cut

sub new {
  my $proto = shift;
  my $class = ref($proto) || $proto;
  my %args = @_;

  my $nr = bless {
		  Telescope => undef,
		  UTDate => undef,
		  DB => undef,
		 };


  # Deal with arguments
  if (@_) {
    my %args = @_;

    # rather than populate hash directly use the accessor methods
    # allow for upper cased variants of keys
    for my $key (keys %args) {
      my $method = lc($key);
      if ($nr->can($method)) {
        $nr->$method( $args{$key} );
      }
    }

  }
  return $nr;

}

=back

=head2 Accessor Methods

=over 4

=item B<date>

Return the date associated with this object. Returns a Time::Piece
object (in UT format).

  $date = $nr->date();
  $nr->date( $date );
  $nr->date( '2002-12-10' );

Accepts a string or a Time::Piece object. The Hours, minutes and seconds
are stripped. The date is assumed to be UT if supplied as a string.
If supplied as an object the local vs UT time can be inferred.

If no date has been specified, the current day will be returned.

If the supplied date can not be parsed as a date, the method will
throw an exception.

=cut

# Defaulting behaviour is dealt with here rather than the constructor
# in case the UT date changes.

sub date {
  my $self = shift;
  if (@_) {
    # parse_date can handle local time
    my $arg = shift;
    my $date = OMP::General->parse_date( $arg );
    throw OMP::Error::BadArgs("Unable to parse $arg as a date")
      unless defined $date;
    $self->{UTDate} = $date;
  }

  if (!defined $self->{UTDate}) {
    return OMP::General->today( 1 );
  } else {
    return $self->{UTDate};
  }
}

=item B<telescope>

The telescope to be used for all database queries. Stored as a string
but can be supplied as an Astro::Telescope object.

  $tel = $nr->telescope;
  $nr->telescope( 'JCMT' );
  $nr->telescope( $tel );

=cut

sub telescope {
  my $self = shift;
  if (@_) {
    my $arg = shift;
    if (UNIVERSAL::isa($arg, "Astro::Telescope")) {
      $arg = $arg->name;
    }
    throw OMP::Error::BadArgs( "Bad argument to telescope method: $arg")
      if ref $arg;

    $self->{Telescope} = uc($arg);

  }
  return $self->{Telescope};
}

=item B<db>

A shared database connection (an C<OMP::DBbackend> object). The first
time this is called, triggers a database connection.

  $db = $nr->db;

Takes no arguments.

=cut

sub db {
  my $self = shift;
  if (!defined $self->{DB}) {
    $self->{DB} = new OMP::DBbackend;
  }
  return $self->{DB};
}

=back

=head2 General Methods

=over 4

=item B<accounting>

Retrieve all the project accounting details for the night as a hash.
The keys are projects and for each project there is a hash containing
keys "DATA" and "DB" indicating whether the information comes from the
data headers or the time accounting database directly.  All accounting
details are C<OMP::Project::TimeAcct> objects.

Data from the accounting database may or may not be confirmed time.
For data from the data headers the confirmed status is not relevant.

  %details = $nr->accounting;

A special key, "__WARNINGS__" includes any warnings generated by the
accounting query (a reference to an array of strings). See
L<"NOTES">. This key is in the top level hash and is a combination of
all warnings generated.

=cut

sub accounting {
  my $self = shift;

  # Hash for the results
  my %results;

  # Get the time accounting info
  my %db = $self->accounting_db;
  $results{DB} = \%db;

  # Get the info from the headers
  my %hdr = $self->accounting_hdr;
  $results{DATA} = \%hdr;

  # Now generate a combined hash
  my %combo;

  for my $src (qw/ DB DATA /) {
    for my $proj (keys %{ $results{$src} } ) {
      # Special case for warnings
      if ($proj eq $WARNKEY) {
	$combo{$WARNKEY} = [] unless exists $combo{$WARNKEY};
	push(@{ $combo{$WARNKEY} }, @{ $results{$src}->{$proj} });
      } else {
	# Store the results in the right place
	$combo{$proj}->{$src} = $results{$src}->{$proj};
      }
    }
  }

  return %combo;
}

=item B<accounting_db>

Return the time accounting database details for each project observed
this night. A hash is returned indexed by project ID and pointing
to the appropriate C<OMP::Project::TimeAcct> object.

This is a cut down version of the C<accounting> method that returns
details from all methods of determining project accounting including
estimates.

  %projects = $nr->accounting_db;

=cut

sub accounting_db {
  my $self = shift;

  # Database connection
  my $db = new OMP::TimeAcctDB( DB => $self->db );

  # Get the time accounting statistics from
  # the TimeAcctDB table
  # We need to also select by telescope here
  my @dbacct = $db->getTimeSpent( utdate => $self->date,
				  telescope => $self->telescope,
				);

  # Convert to a hash [since we can guarantee one instance of a project
  # for a single UT date]
  my %projects;
  for my $acct (@dbacct) {
    $projects{ $acct->projectid } = $acct;
  }

  return %projects;
}

=item B<accounting_hdr>

Return time accounting statistics generated from the data headers
for this night.

 %details = $nr->accounting_hdr();

Also returns a reference to an array of warning information generated
by the scan. The keys in the returned hash are project IDs and the
values are C<OMP::Project::TimeAcct> objects. Warnings are returned
as a reference to an array using key "__WARNINGS__" (See L<"NOTES">).

This results in a subset of the information returned by the C<accounting>
method.

=cut

sub accounting_hdr {
  my $self = shift;

  # Get the time accounting statistics from the data headers
  # Need to catch directory not found
  my $obsgrp = $self->obs;
  my ($warnings, @hdacct);
  if ($obsgrp) {
    ($warnings, @hdacct) = $obsgrp->projectStats();
  } else {
    $warnings = [];
  }

  # Form a hash
  my %projects;
  for my $acct (@hdacct) {
    $projects{ $acct->projectid } = $acct;
  }

  $projects{$WARNKEY} = $warnings;

  return %projects;

}

=item B<obs>

Return the observation details relevant to this night and UT date.
This will include time gaps. Information is returned as an
C<OMP::Info::ObsGroup> object.

Returns undef if no observations could be located.

=cut

sub obs {
  my $self = shift;

  my $grp;
  try {
    $grp = new OMP::Info::ObsGroup( telescope => $self->telescope,
				    date => $self->date);
  };
  return $grp;
}

=item B<msbs>

Retrieve MSB information for the night and telescope in question.


Information is returned in a hash indexed by project ID and with
values of C<OMP::Info::MSB> objects.

=cut

sub msbs {
  my $self = shift;

  my $db = new OMP::MSBDoneDB( DB => $self->db );

  my @results = $db->observedMSBs( date => $self->date->ymd,
				   returnall => 0,
				 );

  # Currently need to verify the telescope outside of the query
  @results = grep { OMP::ProjServer->verifyTelescope( $_->projectid,
						      $self->telescope
						    )} @results;

  # Index by project id
  my %index;
  for my $msb (@results) {
    my $proj = $msb->projectid;
    $index{$proj} = [] unless exists $index{$proj};
    push(@{$index{$proj}}, $msb);
  }

  return %index;
}

=item B<faults>

Return the fault objects relevant to this telescope and UT date.

  @faults = $nr->faults;

Returns a list of C<OMP::Fault> objects.

=cut

sub faults {
  my $self = shift;

  my $fdb = new OMP::FaultDB( DB => $self->db );
  my @results = $fdb->getFaultsByDate($self->date->ymd,
				      $self->telescope);

  return @results;
}

=item B<timelost>

Returns the time lost to faults on this night and telescope.
The time is returned as a Time::Seconds object.

=cut

sub timelost {
  my $self = shift;
  my @faults = $self->faults;
  my $faultstats = new OMP::FaultStats( faults => \@faults );
  return $faultstats->timelost;
}

=item B<shiftComments>

Retrieve all the shift comments associated with this night and
telescope. Entries are retrieved as an array of C<OMP::Info::Comment>
objects.

 @comments = $nr->shiftComments;

=cut

sub shiftComments {
  my $self = shift;
  return OMP::CommentServer->getShiftLog( $self->date->ymd,
					  $self->telescope,
					);
}

=back

=head2 Summarizing

=over 4

=item B<astext>

Generate a plain text summary of the night.

  $text = $nr->astext;

In scalar context returns a single string. In list context returns
a collection of lines (without newlines).

=cut

sub astext {
  my $self = shift;

  my $tel  = $self->telescope;
  my $date = $self->date->ymd;

  my @lines;

  # The start
  my $str = qq{

    Observing Report for $date at the $tel

Project Time Summary

};

  #   T I M E   A C C O U N T I N G
  # Time lost to faults
  my $format = "  %-25s %5.2f hrs\n";
  $str .= sprintf("$format", "Time lost to faults:", $self->timelost->hours );

  # Just do project accounting
  my %acct = $self->accounting_db();

  # Weather and Extended and UNKNOWN and OTHER
  my %text = ( WEATHER => "Time lost to weather:",
	       EXTENDED => "Extended Time:",
	     );
  for my $proj (qw/ WEATHER EXTENDED /) {
    my $time = 0.0;
    if (exists $acct{$tel.$proj}) {
      $time = $acct{$tel.$proj}->timespent->hours;
    }
    $str .= sprintf("$format", $text{$proj}, $time);
  }

  for my $proj (keys %acct) {
    next if $proj =~ /^$tel/;
    $str .= sprintf("$format", $proj.':', $acct{$proj}->timespent->hours);
  }

  $str .= "\n";

  # M S B   S U M M A R Y 
  # Add MSB summary here
  $str .= "Observation summary\n\n";

  my %msbs = $self->msbs;

  for my $proj (keys %msbs) {
    $str .= "  $proj\n";
    for my $msb (@{$msbs{$proj}}) {
      $str .= sprintf("    %-30s %s    %s", substr($msb->targets,0,30),
		      $msb->wavebands, $msb->title). "\n";
    }
  }
  $str .= "\n";

  # Fault summary
  my @faults = $self->faults;

  $str .= "Fault Summary\n\n";

  if (@faults) {
    for my $fault (@faults) {
      my $date = $fault->date;
      my $local = localtime($date->epoch);
      $str.= "  ". $fault->faultid ." [". $local->strftime("%H:%M %Z")."] ".
	$fault->subject ."(".$fault->timelost." hrs lost)\n";

    }
  } else {
    $str .= "  No faults filed on this night.\n";
  }

  $str .= "\n";

  # Shift log summary
  $str .= "Comments\n\n";

  my @comments = $self->shiftComments;
  $Text::Wrap::columns = 72;

  for my $c (@comments) {
    # Use local time
    my $date = $c->date;
    my $local = localtime( $date->epoch );
    my $author = $c->author->name;

    # Get the text and format it
    my $text = $c->text;

    # Really need to convert HTML to text using general method
    $text =~ s/\&apos\;/\'/g;
    $text =~ s/<BR>/\n/gi;

    # Word wrap
    $text = wrap("    ","    ",$text);

    # Now print the comment
    $str .= "  ".$local->strftime("%H:%M %Z") . ": $author\n";
    $str .= $text ."\n\n";
  }


  # Observation log
  $str .= "Observation Log\n\n";

  $str .= $self->obs->summary('72col');

  if (wantarray) {
    return split("\n", $str);
  }
  return $str;
}


=item B<mail_report>

Mail a text version of the report to the relevant mailing list.

  $nr->mail_report();

An optional argument can be used to specify the details of the person
filing the report. Supplied as an OMP::User object. Defaults to
an email adress of "flex@maildomain" if no argument is specified,
where "maildomain" is stored in the config system.

=cut

sub mail_report {
  my $self = shift;
  my $user = shift;

  # Get the mailing list
  my @mailaddr = OMP::Config->getData( 'nightrepemail', 
				       telescope => $self->telescope);


  # Should probably CC observers

  # Get the text
  my $report = $self->astext;

  # Who is filing this report (need the email address)
  my $from;
  if (defined $user) {
    $from = $user->email;
  } else {
    $from = 'flex@' . OMP::Config->getData('maildomain');
  }

  # and mail it
  OMP::BaseDB->_mail_information(
				 to => [ @mailaddr ],
				 from => $from,
				 subject => 'OBS REPORT: '.$self->date->ymd .
				 ' at the ' . $self->telescope,
				 message => $report,
				);
}

=back

=head1 NOTES

The key used for warnings from results hashes (eg the C<accounting>
method) can be retrieved in global variable C<$OMP::NightRep::WARNKEY>.

=head1 SEE ALSO

See C<OMP::TimeAcctDB>, C<OMP::Info::ObsGroup>, C<OMP::FaultDB>,
C<OMP::ShiftDB>

=head1 COPYRIGHT

Copyright (C) 2002-2003 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=cut

1;
