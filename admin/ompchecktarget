#!/local/perl/bin/perl

=head1 NAME

ompchecktarget - checks observed targets against targets proposed for the
                 project or extract proposed targets into JCMT-style
                 catalog.

=head1 SYNOPSIS

    ompchecktarget
    ompchecktarget -ut 20080208  -utstop 20080826 -max 3d -all -targetdir DIR
    ompchecktarget -proj m08bu01 -coords "12:30:30 -10:10:10 J2000" -targetdir DIR
    ompchecktarget -proj m08bu01 -cat -targetdir DIR > m08bu01.cat
    ompchecktarget -man | -help | -version
    ompchecktarget -scheduled -utdate 20120824 -utstop 1 -targetdir DIR

=head1 DESCRIPTION

Note: this program can only be run by the 'staff' group members.

There are four basic ways to use this program:

1. Check observed targets against targets exported from Hedwig:
The first way to use this program is to check already observed and
archived targets against the ones proposed for the project. The
program will extract observed targets (names, projects, coordinates)
from the JCMT Archive COMMON table for the UT date(s) requested and
compares those against the coordinates of targets for the associated
project as exported from Hedwig.

By default ompchecktarget will print observed targets for which NO
matching proposed target can be found within the search radius
including the relevant observing dates plus the distance to the
closest proposed target. If '-all' is specified, information on
all observed targets, including ones with matching proposed targets,
is printed.

2. Check user provided position against targets exported from Hedwig:
A second way to use the program is to compare a user-provided position
against proposed targets for a particular project. The position needs
to be specified on the command-line as a set of coordinates enclosed
in single or double quotes (see -coords).

3. Extract JAC-style catalog from targets exported from Hedwig:
A third way to use the program is to extract proposed targets for a
project and print them in a JAC-style catalog
format (see -cat) for use with e.g. sourceplot.

4. Check scheduled targets against those exported from Hedwig:
This mode is selected if the -scheduled option is specified.  It works
the same as mode (1) but looks at scheduled observations from the
OMP database instead of looking at the archive database.

=head1 OPTIONS

The following options are supported:

=over 4

=item B<-ut>

UT date to check. By default the current date is used.  The UT can be
specified in either YYYYMMDD or YYYY-MM-DD format.

=item B<-uts(top)>

Last UT date if the check is to performed over an interval -ut to -utstop.
If a number less than 367 is specified it is assumed to be the number of
days of the interval, rather than an explicit UT stop date given as
YYYYMMDD or YYYY-MM-DD.

=item B<-max(dist)>

Maximum distance between targets to be regarded as matching. Note that
proposed positions can be (very) approximate only. Bare values or ones
with a 's' appended are deemed to be arcsecs; with a 'm' are taken to
be arcmins, and with a 'd' degrees. Default: 2.5d.

=item B<-a(ll)>

Print information for all observed targets. By default the routine only
displays information on targets for which no matching proposed target
can be found

=item B<-p(roject)>

Restrict the check to the specified project(s) (OMP ID e.g. M07BU01).
It is possible to specify a number of project by using a wildcards '*'
in which case the string has to be enclosed in quotes or the wildcards
back-slashed: \*

=item B<-cat>

Extract proposed targets and print their position
in a JAC-style catalog format. It requires -project to be specified as
well, all other command-line settings are ignored. E.g.

    ompchecktarget -proj M08BN\* -cat

=item B<-co(ords)>

Coordinates to check against proposed sources: instead of obtaining
observed targets from the OMP DB, these user specified coordinates
are used. The coordinate string has to be enclosed within single or
double quotes: 'long lat [type] [format]'

     long, lat: coordinates
     type:     J2000, B1950, galactic, supergalactic.
               Default: J2000
     units:    deg(grees), rad(ians), sex(agesimal).
               Default: "sexagesimal" i.e. colon separated strings.

If coordinates are specified, -all is assumed and -ut, -utstop settings
will be ignored.

=item B<-t(el)>

Specify the telescope to use for the report. This option is a placeholder
for possible future use with UKIRT. Currently JCMT is hardwired.

=item B<-v(ersion)>

Report the version number.

=item B<-h(elp)>

Show a brief help: use -man for more information.

=item B<-man>

Show manual page.

=item B<-d(ebug)>

Switch on debug output

=item B<-scheduled>

Switches to "scheduled observation checking" mode.  Selects observations
where the corresponding timestamp in the science programme table
is within the given UT range.

Projects for certain queues are excluded (EC, JAC, EAO).

=item B<-targetdir>

Specify the directory from which to load target files as exported
from Hedwig using the hedwig2omp utility.  All files named *.json
in this directory will be loaded.

=item B<-fop>

Only look at projects where the given username is set as FOP. The FOP
must be given as the OMP username (e.g. PARSONSH)

=back

=cut

use warnings;
use strict;

use FindBin;

use constant OMPLIB => "$FindBin::RealBin/../lib";

BEGIN {
    $ENV{'OMP_CFG_DIR'} = File::Spec->catdir(OMPLIB, '../cfg')
        unless exists $ENV{'OMP_CFG_DIR'};
}

use lib OMPLIB;

use Getopt::Long;
use Math::Trig;
use Time::Piece;
use Pod::Usage;
use IO::File;
use JSON;

use Astro::Coords;
use Astro::Telescope;

use DBI;

use OMP::Password;
use OMP::DB::Backend;
use OMP::DB::Backend::Archive;
use OMP::DB::MSB;

my $HPI = pi/2;

# Unbuffer output
$| = 1;

# Program name
my $prog = (split /\//,$0)[-1];

my $observed = []; # Array of hashes with observed targets (J2000),
                   # keys:
                   # 'project' (string), 'utdate' (yyyymmdd),
                   # 'name', 'ra', 'dec', 'type' (e.g. j2000),
                   # 'units' (e.g. deg) as retrieved from DB.
                   # To facilitate easy coordinate conversions,
                   # this information has also been configured into
                   # an Astro::Coords object as hash key 'coords'.

my $proposed = []; # Same as @observed, but for proposed targets.
                   # The hash key utdate will be empty.

my %results;       # Set up a hash with the printed line as key and the
                   # associated dates as value. By checking the existance
                   # of the key duplication for the same source observed
                   # on multiple dates is avoided.

my $targetdir = undef;

my ($help, $man, $version, $dbg);
my ($utd, $uts, $max, $all, $tel, $prjs, $cat, $crds, $scheduled, $fop);

my $status = GetOptions(
    "ut=s" => \$utd,
    "utstop=s" => \$uts,
    "maxdist=s" => \$max,
    "project=s" => \$prjs,
    "cat" => \$cat,
    "coords=s" => \$crds,
    "tel=s" => \$tel,
    "all" => \$all,
    "help" => \$help,
    "man" => \$man,
    "version" => \$version,
    "debug" => \$dbg,
    "scheduled" => \$scheduled,
    'targetdir=s' => \$targetdir,
    'fop=s' => \$fop,
) or pod2usage(-exitstatus => 1, -verbose => 0);

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

if ($version) {
    print "${prog} - Check observed targets versus proposed targets\n";
    print "\tversion 1.0 2008-08-29 rpt - Joint Astronomy Centre\n";
    exit;
}

# Switch debug output to STDERR on (1; else 0)
my $debug = 0;
$debug = 1 if (defined $dbg);

# Choose "mode" name -- only used to cusomtize the output.
# Actual mode should be determined by seeing if $scheduled
# is defined rather than reading this string!
my $mode = defined $scheduled ? 'scheduled' : 'observed';

# Telescope (currently hard-wired to JCMT)
my $telescope = 'JCMT';

#$telescope = uc $tel if (defined $tel);

# Project(s)
my $projects = '';
$projects = uc $prjs if (defined $prjs);
die "*ERROR* Need to also specify a project with user-specified coordinates"
    if ($projects eq '' and (defined $crds or defined $cat));

# FOP
$fop = uc $fop if (defined $fop);

# Just print catalog of proposed targets?
if (defined $cat) {
    print_cat($telescope, "$projects");
    exit;
}

# User specified coordinates (parse below)
my $coords = $crds if (defined $crds);

# Show all?
my $show_all = 0;
$show_all = 1 if (defined $all or defined $crds);


# UT start and stop
my $utstart = gmtime->ymd;
$utstart = $utd if (defined $utd and not defined $crds);
$utstart =~ s/\-//g;
die "*Error* '-utd $utd' not a valid date yyyymmd or yyyy-mm-dd\n"
    if ($utstart !~ /^\d{8}$/a);

my $utstop = $utstart;
$utstop = $uts if (defined $uts and not defined $crds);
$utstop =~ s/\-//g;
die "*Error* '-uts $uts' not a valid date yyyymmd or yyyy-mm-dd\n"
    if ($utstop !~ /^\d{1,8}$/a);

# If small number interpret as interval rather than date
if ($utstop < 367) {
    my $t = Time::Piece->new->strptime("$utstart", '%Y%m%d');
    $utstop--;    # SQL 'between' is inclusive boundaries
    $t += (24 * 3600 * $utstop);
    $utstop = $t->ymd;
    $utstop =~ s/\-//g;
}


# Maximum distance allowed
my $maxdist = 2.5 * 3600.0;
if (defined $max) {
    my $unit = 's';  # default unit, append to max to have at least 1 char.
    "${max}${unit}" =~ /(\d+\.?\d*)([a-z]?)/aai
        && do {$maxdist = $1; $unit = $2};

    die "*Error* '-max $max' unit not recognized.\nUse 'm' for arcmins and 'd' for degrees. Nothing or 's' for arcsecs.\n"
        if ($unit !~ /(s|m|d)/i);

    $maxdist *= 60 if ($unit eq 'm');
    $maxdist *= 3600 if ($unit eq 'd');
}

my $prtdist = $maxdist;
my $unit = "arcsecs";
if ($prtdist >= 60.0 and $prtdist < 3600) {
    $prtdist /= 60.0;
    $unit = "arcmins";
}
elsif ($maxdist >= 3600.0) {
    $prtdist /= 3600.0;
    $unit = "degrees";
}


print "\n---------------------------------------------------------------------------\n";

unless (defined $crds) {
    print "$telescope ${prog} results for UT date";
    if ($utstart == $utstop) {
        print " $utstart.\n";
    }
    else {
        print "s $utstart - $utstop.\n";
    }
}
else {
    print "$telescope ${prog} results for user specified coordinates\n";
}
printf "Max distance allowed between $mode and proposed targets: %5.2f %s\n",
    $prtdist, $unit;

print "\n";


# Get observed targets
unless ($coords) {
    unless ($scheduled) {
        # from COMMON table in JCMT DB sorted by project.
        $observed = get_observed_targets($utstart, $utstop,
            "$projects", $telescope, $fop);
    }
    else {
        $observed = get_scheduled_targets($utstart, $utstop, $fop);
    }
}
else {
    # or for user-specified coordinates
    $observed = get_user_target("$projects", $telescope, $coords);
}

# Get proposed targets for observed projects.
$proposed = get_proposed_targets($telescope, $observed);

print "---------------------------------------------------------------------------\n";

# Compare observed targets to proposed ones.
foreach my $obs (@$observed) {

    my $utdate = $obs->{'utdate'};

    # Give warning if coordinates not recognized.
    unless (defined $obs->{'ra'}
            and defined $obs->{'dec'}
            and $obs->{'ra'} ne ""
            and $obs->{'dec'} ne "") {
        my $msg = sprintf
            "[%s] target '%s' (obs %i): No %s coordinates in %s DB",
            $obs->{'project'}, $obs->{'name'}, $obs->{'obsnum'}, $mode,
            ($mode eq 'scheduled' ? 'OMP' : 'JCMT');
        unless (exists $results{"$msg"}) {
            $results{"$msg"} = "$utdate";
        }
        else {
            $results{"$msg"} .= " $utdate";
        }
        next;
    }

    printf STDERR ucfirst($mode) . ": %-16s %12s %12s J2000\n",
        $obs->{'coords'}->{'name'},
        $obs->{'coords'}->ra2000(format => 'sex'),
        $obs->{'coords'}->dec2000(format => 'sex'),
        if ($debug);

    # Find nearest target for current project
    my $msg = find_nearest($obs, $proposed);

    # Just append utdate to 'value' string if message already
    # exists (i.e. same results was found for a different date
    if ($msg ne "") {
        unless (exists $results{"$msg"}) {
            $results{"$msg"} = "$utdate";
        }
        else {
            $results{"$msg"} .= " $utdate";
        }
    }
}

print "\n" . ucfirst($mode) . " targets sorted by project, ";
unless (defined $crds) {
    if ($show_all) {
        print "results include matching targets:\n";
    }
    else {
        print "non-matching targets only:\n";
    }
}
print "\n";

if (scalar(keys %results) > 0) {
    foreach my $key (sort (keys(%results))) {
        print "$key\n\tDate(s): $results{$key}\n\n";
    }
}
else {
    print "No non-matching targets found\n\n";
}


# Get the observed targets from the COMMON table in JCMT Archive.
# Would have like to use OMP::ObsGroups but, due to a bug, it does
# not presently return the Coord object. Hence used a direct query.
#
# Use: $observed = get_observed_targets ( $utstart, $utstop,
#                                         $projects, $telescope, $fop )
#
# Input:
#    $utstart, $utstop: observed date range (yyyymmdd)
#    $projects: string, possibly with wild cards ('*')
#    $telescope: telescope to query COMMON table for (not yet used)
#    $fop: only get projects where specified username is listed as support
#
# Returned:
#    Reference to array of hashes with observed targets, keys:
#       'project' (string), 'utdate' (yyyymmdd), 'name', 'ra', 'dec',
#       'type' (e.g. j2000), 'units' (e.g. deg) as retrieved from DB.
#       To facilitate easy coordinate conversions, this information
#       has also been configured into an Astro::Coords object
#       as hash key 'coords'.
sub get_observed_targets {
    my ($utstart, $utstop, $projids, $telescope, $fop) = @_;

    my $prjclause = '';
    if ($projects ne '') {
        $prjclause = "AND project LIKE \"$projids\"";
        $prjclause =~ s/\*/\%/g;
    }

    my $fopwhereclause = '';
    my $fopjoinclause = '';
    if (defined($fop) && $fop ne '') {
        $fopwhereclause = " AND userid = \"$fop\"  AND capacity=\"SUPPORT\"";
        $fopjoinclause = " JOIN omp.ompprojuser AS op ON jcmt.COMMON.project = op.projectid ";
    }

    # Connect to the database.
    print STDERR "# Connecting to OMP server...";
    my $dbbackend = OMP::DB::Backend::Archive->new();
    my $dbh = $dbbackend->handle();
    print STDERR "done\n";

    # Now retrieve data from the table.
    my $sql = "
        SELECT distinct project, utdate, object as name, obsra as ra, obsdec as `dec`, obsnum
        FROM jcmt.COMMON  $fopjoinclause
        WHERE
        utdate BETWEEN $utstart AND $utstop
        $prjclause
        $fopwhereclause
        AND telescop=\"$telescope\"
        ORDER BY project, utdate";

    print 'Running query: ', $sql, "\n" if $debug;
    my $sth = $dbh->prepare($sql);
    $sth->execute() or die 'Could not execute query: ' . $sth->errstr();

    my @observed;
    while (my $ref = $sth->fetchrow_hashref()) {
        next unless ($ref->{'project'} =~ /^M\d\d(A|B)/aai
            and $ref->{'project'} !~ /^M\d\d(A|B)EC/aai);

        printf STDERR "[%s] " . ucfirst($mode) . ": %-16s", $ref->{'project'}, $ref->{'name'}
            if $debug;

        $ref->{'type'} = 'j2000';
        $ref->{'units'} = 'deg';
        if (defined $ref->{'ra'} and defined $ref->{'dec'}) {
            printf STDERR " %12s %12s", $ref->{'ra'}, $ref->{'dec'}
                if $debug;

            my $ocoords = Astro::Coords->new(
                name => $ref->{'name'},
                ra => $ref->{'ra'},
                dec => $ref->{'dec'},
                type => $ref->{'type'},
                units => $ref->{'units'}
            );
            $ocoords->telescope(Astro::Telescope->new($telescope));

            $ref->{'coords'} = $ocoords;
        }
        print STDERR "\n" if $debug;

        push @observed, $ref;
    }

    $sth->finish();

    # Disconnect from the database.
    $dbbackend->disconnect();
    undef $dbh;

    if (@observed > 0) {
        printf STDERR "# Fetched %d observed targets\n", $#observed + 1;
    }
    else {
        print STDERR "No observed targets found\nFinished\n";
        exit;
    }

    return \@observed;
}


# Get the scheduled targets from the ompobs table in OMP database.
#
# Use: $scheduled = get_scheduled_targets ( $utstart, $utstop, $fop )
#
# Input:
#    $utstart, $utstop: observed date range (yyyymmdd)
#    $fop: OMP user id of friend of project (can be blank)
#
# Returned:
#    Reference to array of hashes with observed targets, keys:
#       'project' (string), 'utdate' (yyyymmdd), 'name', 'ra', 'dec',
#       'type' (e.g. j2000), 'units' (e.g. deg) as retrieved from DB.
#       To facilitate easy coordinate conversions, this information
#       has also been configured into an Astro::Coords object
#       as hash key 'coords'.
sub get_scheduled_targets {
    my ($utstart, $utstop) = @_;

    # This strptime function appears to assume UT, so we can
    # use the specified dates directly to get the timestamps.
    $utstart = Time::Piece->new->strptime("$utstart", '%Y%m%d')->epoch();
    $utstop = Time::Piece->new->strptime("$utstop 23:59:59", '%Y%m%d %H:%M:%S')->epoch();

    my $fopclause = '';
    if (defined($fop) && $fop ne '') {
        $fopclause = " AND Q.projectid IN
            (SELECT projectid FROM $OMP::ProjDB::PROJUSERTABLE WHERE userid=\"$fop\" AND capacity=\"SUPPORT\")";
    }

    # Connect to the database.
    print STDERR "# Connecting to OMP server...";
    my $dbbackend = OMP::DB::Backend->new();
    my $dbh = $dbbackend->handle();
    print STDERR "done\n";

    # Now retrieve data from the table.
    my $sql = "SELECT distinct Q.projectid AS project, target as name, ra2000 as ra, dec2000 as `dec`, timestamp
        FROM $OMP::DB::MSB::OBSTABLE AS Q
            JOIN $OMP::DB::MSB::SCITABLE as S ON Q.projectid = S.projectid
            JOIN $OMP::ProjDB::PROJTABLE AS P ON Q.projectid = P.projectid
        WHERE
        P.telescope = \"JCMT\"
        AND timestamp BETWEEN $utstart AND $utstop
        AND Q.projectid NOT IN (
            SELECT projectid FROM $OMP::ProjDB::PROJQUEUETABLE WHERE country IN (\"EC\", \"JAC\", \"EAO\"))
        $fopclause
        ORDER BY project, name";
    print 'Running query: ', $sql, "\n" if $debug;
    my $sth = $dbh->prepare($sql);
    $sth->execute() or die 'Could not execute query: ' . $sth->errstr();

    my @observed;
    while (my $ref = $sth->fetchrow_hashref()) {
        next unless ($ref->{'project'} !~ /^M\d\d(A|B)EC/aai);

        printf STDERR "[%s] Scheduled: %-16s", $ref->{'project'}, $ref->{'name'}
            if $debug;

        $ref->{'type'} = 'j2000';
        $ref->{'units'} = 'rad';
        $ref->{'utdate'} = Time::Piece->new->strptime($ref->{'timestamp'}, '%s')->ymd('');
        $ref->{'obsnum'} = 0;
        if (defined $ref->{'ra'} and defined $ref->{'dec'}) {
            printf STDERR " %12s %12s", $ref->{'ra'}, $ref->{'dec'}
                if $debug;

            my $ocoords = Astro::Coords->new(
                name => $ref->{'name'},
                ra => $ref->{'ra'},
                dec => $ref->{'dec'},
                type => $ref->{'type'},
                units => $ref->{'units'}
            );
            $ocoords->telescope(Astro::Telescope->new('JCMT'));

            $ref->{'coords'} = $ocoords;
        }
        print STDERR "\n" if $debug;

        push @observed, $ref;
    }

    $sth->finish();

    # Disconnect from the database.
    $dbbackend->disconnect();
    undef $dbh;

    if (@observed > 0) {
        printf STDERR "# Fetched %d scheduled targets\n", $#observed + 1;
    }
    else {
        print STDERR "No scheduled targets found\nFinished\n";
        exit;
    }

    return \@observed;
}


# Get the proposed sources from files exported from Hedwig.
#
# The location of these files must be specified via the "-targetdir"
# command line option.  (This is retrieved from the $targetdir variable.)
#
# Use: $proposed = get_proposed_targets ( $telescope, \@observed )
#
# $telescope: (string) Telescope name.
#
# $observed:
#    Array of hashes with a key 'project'  with valid project names.
#    Duplicate entries may exist. Any other keys that may be present
#    for each entry are ignored.
#
# Returned:
#    Ref to array of hashes with observed targets, keys:
#         'project' (string), 'name' and an Astro::Coords object
#         as hash key 'coords'.
sub get_proposed_targets {
    my ($telescope, $observed) = @_;

    # Array of hashes for results
    my @proposed;

    # Create hash of project identifiers.
    my %observed = map {$_->{'project'} => 1} @$observed;

    # Iterate over files in the target files directory.
    die 'Target files directory (-targetdir) not specified'
        unless defined $targetdir;

    for my $filename (<$targetdir/*.json>) {
        print STDERR "Obtaining proposed targets from file " . $filename . "\n"
            if ($debug);
        local $/;
        my $fh = IO::File->new($filename, 'r');
        my $projects = decode_json(<$fh>);
        $fh->close();

        while (my ($proposed_project, $proposed_targets) = each %$projects) {
            next unless exists $observed{$proposed_project};

            foreach my $proposed_target (@$proposed_targets) {
                my $ref = {
                    project => $proposed_project,
                    name => $proposed_target->{'name'},
                };

                printf STDERR "Proposed: [%s] %-16s", $ref->{'project'}, $ref->{'name'}
                    if ($debug);

                if ($proposed_target->{'system'} eq 'ICRS') {
                    $ref->{'coords'} = Astro::Coords->new(
                        name => $proposed_target->{'name'},
                        ra => $proposed_target->{'x'},
                        dec => $proposed_target->{'y'},
                        type => 'J2000',
                        units => 'degrees'
                    );
                }
                elsif ($proposed_target->{'system'} eq 'Galactic') {
                    $ref->{'coords'} = Astro::Coords->new(
                        name => $proposed_target->{'name'},
                        long => $proposed_target->{'x'},
                        lat => $proposed_target->{'y'},
                        type => 'galactic',
                        units => 'degrees'
                    );
                }
                else {
                    print STDERR ' Unknown coordinate system: '
                        . $proposed_target->{'system'} . "\n"
                        if $debug;
                    next;
                }

                $ref->{'coords'}->telescope(Astro::Telescope->new($telescope));

                printf STDERR " %12s %12s J2000\n",
                    $ref->{'coords'}->ra2000(format => 'sex'),
                    $ref->{'coords'}->dec2000(format => 'sex')
                    if $debug;

                push @proposed, $ref;
            }
        }
    }

    if (@proposed > 0) {
        printf STDERR "# Fetched %d proposed targets\n", $#proposed + 1;
    }
    else {
        print STDERR "No proposed targets found\n";
    }

    return \@proposed;
}


# For an observed source find the nearest proposed source in the
# associated project(s).
#
# Use: $msg = find_nearest ( \%obs, \@proposed )
#
# $obs:
#    Ref to hash with  observed target, keys:
#         'project' (string), 'utdate' (yyyymmdd), 'name', 'ra', 'dec',
#         'type' (e.g. j2000), 'units' (e.g. deg) as retrieved from DB.
#         To facilitate easy coordinate conversions, this information
#         has also been configured into an Astro::Coords object
#         as hash key 'coords'.
#
# $proposed: Array of hashes with proposed targets, as above.
#
# Returned: String with result of search
sub find_nearest {
    my ($obs, $proposed) = @_;

    my $mindist = 1e+12;
    my $idxmin = -1;
    my $idx = -1;

    # Find closest proposed target
    my $ora = $obs->{'coords'}->ra2000(format => 'rad');
    my $odec = $obs->{'coords'}->dec2000(format => 'rad');

    # Translate observed project for perl =~
    my $oproject = $obs->{'project'};
    $oproject =~ s/\*/\.\*/g;

    foreach my $prop (@$proposed) {
        $idx ++;

        # Skip if not the same project
        next if $prop->{'project'} !~ /$oproject/i;

        my $pra = $prop->{'coords'}->ra2000(format => 'rad');
        my $pdec = $prop->{'coords'}->dec2000(format => 'rad');

        # Astro::Coords-> distance uses tangent plane which is not
        # appropriate here. Calculate from ra,dec.
        my $distance = 3600.0 * rad2deg(abs(acos(
            cos($HPI - $odec) * cos($HPI - $pdec)
            + sin($HPI - $odec) * sin($HPI - $pdec) * cos($ora - $pra)
        )));

        printf STDERR "%-16s <--> %-16s distance: %12.2f arcsec\n",
            $obs->{'coords'}->name, $prop->{'coords'}->name, $distance
            if ($debug);

        if ($distance < $mindist) {
            $idxmin = $idx;
            $mindist = $distance;
        }
    }

    my $msg = "";

    # Project not in files exported from Hedwig
    if ($idxmin < 0) {
        $msg = sprintf "[%s] target %-16s: project *NOT* in Hedwig exported files",
            $obs->{'project'}, $obs->{'coords'}->name;
        return $msg;
    }

    my $unit = "arcsecs";
    my $prtdist = $mindist;
    if ($prtdist >= 60.0 and $prtdist < 3600) {
        $prtdist /= 60.0;
        $unit = "arcmins";
    }
    elsif ($prtdist >= 3600.0 and $prtdist != 1e+12) {
        $prtdist /= 3600.0;
        $unit = "degrees";
    }

    if ($mindist <= $maxdist) {
        # Target found
        $msg = sprintf "[%s] target %-16s found\nas proposed target [%s] %s at %5.2f $unit",
            $obs->{'project'}, $obs->{'coords'}->name,
            $$proposed[$idxmin]->{'project'},
            $$proposed[$idxmin]->{'coords'}->name, $prtdist
            if $show_all;
    }
    else {
        # Target not found
        $msg = sprintf "[%s] target %-16s is *NOT* found in Hedwig exported files!\n",
            $obs->{'project'}, $obs->{'coords'}->name;
        $msg .= sprintf ucfirst($mode) . " position: %12s %12s J2000\n",
            $obs->{'coords'}->ra2000(format => 'sex'),
            $obs->{'coords'}->dec2000(format => 'sex')
            if ($obs->{'coords'}->name !~ /user defined\:/);
        if ($mindist != 1e+12) {
            $msg .= sprintf "Closest proposed:%s%12s %12s\n%s             [%s] %-16s at %5.2f $unit",
                (' ' x (length($mode) - 6)),
                $$proposed[$idxmin]->{'coords'}->ra2000(format => 'sex'),
                $$proposed[$idxmin]->{'coords'}->dec2000(format => 'sex'),
                (' ' x length($mode)),
                uc($$proposed[$idxmin]->{'project'}),
                $$proposed[$idxmin]->{'coords'}->name,
                $prtdist;
        }
        else {
            $msg .= "No close proposed targets";
        }
    }

    return $msg;
}


# Convert user specified coordinates in @observe hash (see above)
#
# Use: $observed = &get_user_target( "$projects", $telescope, $coords );
#
# $projects:  (string) Project string (can contain wildcards)
# $telescope: (string)
# $coords:    User specified coordinates: 'long lat [type] [format]'
#     long, lat: coordinates
#     type:     J2000, B1950, galactic, supergalactic.
#     units:    deg(grees), rad(ians), sex(agesimal).
sub get_user_target {
    my ($projects, $telescope, $coords) = @_;

    $coords =~ s/^\s+//;
    my ($long, $lat, $type, $units) = split /\s+/, $coords;
    $type = 'j2000' unless (defined $type and $type ne '');
    $units = 'sex' unless (defined $units and $units ne '');
    $type = lc $type;
    $units = lc $units;
    if ($type =~ /^deg|rad|sex/) {
        $units = lc $type;
        $type = "j2000";
    }

    my $href = {};
    $href->{'utdate'} = "n/a";
    $href->{'project'} = "$projects";
    $href->{'name'} = "'user defined: $coords'";
    $href->{'ra'} = "$long";
    $href->{'dec'} = "$lat";
    $href->{'type'} = "$type";
    $href->{'units'} = "$units";

    my $ocoord = Astro::Coords->new(
        name => $href->{'name'},
        ra => $href->{'ra'},
        dec => $href->{'dec'},
        type => $href->{'type'},
        units => $href->{'units'}
    );
    $ocoord->telescope(Astro::Telescope->new($telescope));

    $href->{'coords'} = $ocoord;

    my @observed;
    push @observed, $href;

    return \@observed;
}


# Retrieve project targets as exported from Hedwig and print JAC-style catalog
#
# Use: print_cat( $telescope, "$projects" );
#
# $projects:  (string) Project string (can contain wildcards)
# $telescope: (string)
sub print_cat {
    my ($telescope, $project) = @_;

    # See $observed and $proposed at top code
    my @observed;
    push @observed, {'project' => "$project"};

    my $proposed = [];

    $proposed = get_proposed_targets($telescope, \@observed);

    # print catalog
    foreach my $p (@$proposed) {
        $p->{'name'} =~ s/\s+/\_/g;
        my $line = sprintf "%-16s %12s &%12s RJ [%s]",
            $p->{'coords'}->{'name'},
            $p->{'coords'}->ra2000(format => 'sex'),
            $p->{'coords'}->dec2000(format => 'sex'),
            $p->{'project'};

        # Space separated coordinates
        $line =~ s/\:/\ /g;

        # Separate - sign on Dec and add + if necessary
        $line =~ s/\&\-/\-\ /g;
        $line =~ s/\&/\+/g;

        print "$line\n";
    }
}
